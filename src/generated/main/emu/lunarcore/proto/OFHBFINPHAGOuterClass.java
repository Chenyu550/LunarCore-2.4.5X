// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class OFHBFINPHAGOuterClass {
  /**
   * Protobuf type {@code OFHBFINPHAG}
   */
  public static final class OFHBFINPHAG extends ProtoMessage<OFHBFINPHAG> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     */
    private final RepeatedInt aALLCOBKIDB = RepeatedInt.newEmptyInstance();

    private OFHBFINPHAG() {
    }

    /**
     * @return a new empty instance of {@code OFHBFINPHAG}
     */
    public static OFHBFINPHAG newInstance() {
      return new OFHBFINPHAG();
    }

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     * @return whether the aALLCOBKIDB field is set
     */
    public boolean hasAALLCOBKIDB() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     * @return this
     */
    public OFHBFINPHAG clearAALLCOBKIDB() {
      bitField0_ &= ~0x00000001;
      aALLCOBKIDB.clear();
      return this;
    }

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAALLCOBKIDB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAALLCOBKIDB() {
      return aALLCOBKIDB;
    }

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAALLCOBKIDB() {
      bitField0_ |= 0x00000001;
      return aALLCOBKIDB;
    }

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     * @param value the aALLCOBKIDB to add
     * @return this
     */
    public OFHBFINPHAG addAALLCOBKIDB(final int value) {
      bitField0_ |= 0x00000001;
      aALLCOBKIDB.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 AALLCOBKIDB = 14;</code>
     * @param values the aALLCOBKIDB to add
     * @return this
     */
    public OFHBFINPHAG addAllAALLCOBKIDB(final int... values) {
      bitField0_ |= 0x00000001;
      aALLCOBKIDB.addAll(values);
      return this;
    }

    @Override
    public OFHBFINPHAG copyFrom(final OFHBFINPHAG other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aALLCOBKIDB.copyFrom(other.aALLCOBKIDB);
      }
      return this;
    }

    @Override
    public OFHBFINPHAG mergeFrom(final OFHBFINPHAG other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAALLCOBKIDB()) {
        getMutableAALLCOBKIDB().addAll(other.aALLCOBKIDB);
      }
      return this;
    }

    @Override
    public OFHBFINPHAG clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aALLCOBKIDB.clear();
      return this;
    }

    @Override
    public OFHBFINPHAG clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aALLCOBKIDB.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof OFHBFINPHAG)) {
        return false;
      }
      OFHBFINPHAG other = (OFHBFINPHAG) o;
      return bitField0_ == other.bitField0_
        && (!hasAALLCOBKIDB() || aALLCOBKIDB.equals(other.aALLCOBKIDB));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < aALLCOBKIDB.length(); i++) {
          output.writeRawByte((byte) 112);
          output.writeUInt32NoTag(aALLCOBKIDB.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * aALLCOBKIDB.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aALLCOBKIDB);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public OFHBFINPHAG mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 114: {
            // aALLCOBKIDB [packed=true]
            input.readPackedUInt32(aALLCOBKIDB, tag);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 112: {
            // aALLCOBKIDB [packed=false]
            tag = input.readRepeatedUInt32(aALLCOBKIDB, tag);
            bitField0_ |= 0x00000001;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedUInt32(FieldNames.aALLCOBKIDB, aALLCOBKIDB);
      }
      output.endObject();
    }

    @Override
    public OFHBFINPHAG mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 313982738: {
            if (input.isAtField(FieldNames.aALLCOBKIDB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aALLCOBKIDB);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public OFHBFINPHAG clone() {
      return new OFHBFINPHAG().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static OFHBFINPHAG parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new OFHBFINPHAG(), data).checkInitialized();
    }

    public static OFHBFINPHAG parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new OFHBFINPHAG(), input).checkInitialized();
    }

    public static OFHBFINPHAG parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new OFHBFINPHAG(), input).checkInitialized();
    }

    /**
     * @return factory for creating OFHBFINPHAG messages
     */
    public static MessageFactory<OFHBFINPHAG> getFactory() {
      return OFHBFINPHAGFactory.INSTANCE;
    }

    private enum OFHBFINPHAGFactory implements MessageFactory<OFHBFINPHAG> {
      INSTANCE;

      @Override
      public OFHBFINPHAG create() {
        return OFHBFINPHAG.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aALLCOBKIDB = FieldName.forField("AALLCOBKIDB");
    }
  }
}
