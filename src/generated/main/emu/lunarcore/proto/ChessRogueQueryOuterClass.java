// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChessRogueQueryOuterClass {
  /**
   * Protobuf type {@code ChessRogueQuery}
   */
  public static final class ChessRogueQuery extends ProtoMessage<ChessRogueQuery> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 KDHBPKCKEAL = 10;</code>
     */
    private int kDHBPKCKEAL;

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     */
    private final RepeatedInt mainStoryId = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     */
    private final RepeatedMessage<EKLAFMBHNIPEntry> eKLAFMBHNIP = RepeatedMessage.newEmptyInstance(EKLAFMBHNIPEntry.getFactory());

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     */
    private final RepeatedMessage<ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo> diceInfo = RepeatedMessage.newEmptyInstance(ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo.getFactory());

    private ChessRogueQuery() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueQuery}
     */
    public static ChessRogueQuery newInstance() {
      return new ChessRogueQuery();
    }

    /**
     * <code>optional uint32 KDHBPKCKEAL = 10;</code>
     * @return whether the kDHBPKCKEAL field is set
     */
    public boolean hasKDHBPKCKEAL() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 KDHBPKCKEAL = 10;</code>
     * @return this
     */
    public ChessRogueQuery clearKDHBPKCKEAL() {
      bitField0_ &= ~0x00000001;
      kDHBPKCKEAL = 0;
      return this;
    }

    /**
     * <code>optional uint32 KDHBPKCKEAL = 10;</code>
     * @return the kDHBPKCKEAL
     */
    public int getKDHBPKCKEAL() {
      return kDHBPKCKEAL;
    }

    /**
     * <code>optional uint32 KDHBPKCKEAL = 10;</code>
     * @param value the kDHBPKCKEAL to set
     * @return this
     */
    public ChessRogueQuery setKDHBPKCKEAL(final int value) {
      bitField0_ |= 0x00000001;
      kDHBPKCKEAL = value;
      return this;
    }

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     * @return whether the mainStoryId field is set
     */
    public boolean hasMainStoryId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     * @return this
     */
    public ChessRogueQuery clearMainStoryId() {
      bitField0_ &= ~0x00000002;
      mainStoryId.clear();
      return this;
    }

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMainStoryId()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getMainStoryId() {
      return mainStoryId;
    }

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableMainStoryId() {
      bitField0_ |= 0x00000002;
      return mainStoryId;
    }

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     * @param value the mainStoryId to add
     * @return this
     */
    public ChessRogueQuery addMainStoryId(final int value) {
      bitField0_ |= 0x00000002;
      mainStoryId.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 main_story_id = 8;</code>
     * @param values the mainStoryId to add
     * @return this
     */
    public ChessRogueQuery addAllMainStoryId(final int... values) {
      bitField0_ |= 0x00000002;
      mainStoryId.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     * @return whether the eKLAFMBHNIP field is set
     */
    public boolean hasEKLAFMBHNIP() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     * @return this
     */
    public ChessRogueQuery clearEKLAFMBHNIP() {
      bitField0_ &= ~0x00000004;
      eKLAFMBHNIP.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEKLAFMBHNIP()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<EKLAFMBHNIPEntry> getEKLAFMBHNIP() {
      return eKLAFMBHNIP;
    }

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<EKLAFMBHNIPEntry> getMutableEKLAFMBHNIP() {
      bitField0_ |= 0x00000004;
      return eKLAFMBHNIP;
    }

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     * @param value the eKLAFMBHNIP to add
     * @return this
     */
    public ChessRogueQuery addEKLAFMBHNIP(final EKLAFMBHNIPEntry value) {
      bitField0_ |= 0x00000004;
      eKLAFMBHNIP.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueQuery.EKLAFMBHNIPEntry EKLAFMBHNIP = 6;</code>
     * @param values the eKLAFMBHNIP to add
     * @return this
     */
    public ChessRogueQuery addAllEKLAFMBHNIP(final EKLAFMBHNIPEntry... values) {
      bitField0_ |= 0x00000004;
      eKLAFMBHNIP.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     * @return whether the diceInfo field is set
     */
    public boolean hasDiceInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     * @return this
     */
    public ChessRogueQuery clearDiceInfo() {
      bitField0_ &= ~0x00000008;
      diceInfo.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDiceInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo> getDiceInfo() {
      return diceInfo;
    }

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo> getMutableDiceInfo(
        ) {
      bitField0_ |= 0x00000008;
      return diceInfo;
    }

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     * @param value the diceInfo to add
     * @return this
     */
    public ChessRogueQuery addDiceInfo(
        final ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo value) {
      bitField0_ |= 0x00000008;
      diceInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueNousDiceInfo dice_info = 12;</code>
     * @param values the diceInfo to add
     * @return this
     */
    public ChessRogueQuery addAllDiceInfo(
        final ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo... values) {
      bitField0_ |= 0x00000008;
      diceInfo.addAll(values);
      return this;
    }

    @Override
    public ChessRogueQuery copyFrom(final ChessRogueQuery other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kDHBPKCKEAL = other.kDHBPKCKEAL;
        mainStoryId.copyFrom(other.mainStoryId);
        eKLAFMBHNIP.copyFrom(other.eKLAFMBHNIP);
        diceInfo.copyFrom(other.diceInfo);
      }
      return this;
    }

    @Override
    public ChessRogueQuery mergeFrom(final ChessRogueQuery other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKDHBPKCKEAL()) {
        setKDHBPKCKEAL(other.kDHBPKCKEAL);
      }
      if (other.hasMainStoryId()) {
        getMutableMainStoryId().addAll(other.mainStoryId);
      }
      if (other.hasEKLAFMBHNIP()) {
        getMutableEKLAFMBHNIP().addAll(other.eKLAFMBHNIP);
      }
      if (other.hasDiceInfo()) {
        getMutableDiceInfo().addAll(other.diceInfo);
      }
      return this;
    }

    @Override
    public ChessRogueQuery clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kDHBPKCKEAL = 0;
      mainStoryId.clear();
      eKLAFMBHNIP.clear();
      diceInfo.clear();
      return this;
    }

    @Override
    public ChessRogueQuery clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mainStoryId.clear();
      eKLAFMBHNIP.clearQuick();
      diceInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueQuery)) {
        return false;
      }
      ChessRogueQuery other = (ChessRogueQuery) o;
      return bitField0_ == other.bitField0_
        && (!hasKDHBPKCKEAL() || kDHBPKCKEAL == other.kDHBPKCKEAL)
        && (!hasMainStoryId() || mainStoryId.equals(other.mainStoryId))
        && (!hasEKLAFMBHNIP() || eKLAFMBHNIP.equals(other.eKLAFMBHNIP))
        && (!hasDiceInfo() || diceInfo.equals(other.diceInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(kDHBPKCKEAL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < mainStoryId.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(mainStoryId.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < eKLAFMBHNIP.length(); i++) {
          output.writeRawByte((byte) 50);
          output.writeMessageNoTag(eKLAFMBHNIP.get(i));
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < diceInfo.length(); i++) {
          output.writeRawByte((byte) 98);
          output.writeMessageNoTag(diceInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kDHBPKCKEAL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * mainStoryId.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(mainStoryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * eKLAFMBHNIP.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(eKLAFMBHNIP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * diceInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(diceInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueQuery mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // kDHBPKCKEAL
            kDHBPKCKEAL = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // mainStoryId [packed=true]
            input.readPackedUInt32(mainStoryId, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // eKLAFMBHNIP
            tag = input.readRepeatedMessage(eKLAFMBHNIP, tag);
            bitField0_ |= 0x00000004;
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // diceInfo
            tag = input.readRepeatedMessage(diceInfo, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 64: {
            // mainStoryId [packed=false]
            tag = input.readRepeatedUInt32(mainStoryId, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.kDHBPKCKEAL, kDHBPKCKEAL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.mainStoryId, mainStoryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.eKLAFMBHNIP, eKLAFMBHNIP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.diceInfo, diceInfo);
      }
      output.endObject();
    }

    @Override
    public ChessRogueQuery mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 160463162: {
            if (input.isAtField(FieldNames.kDHBPKCKEAL)) {
              if (!input.trySkipNullValue()) {
                kDHBPKCKEAL = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1525676279:
          case -314743701: {
            if (input.isAtField(FieldNames.mainStoryId)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(mainStoryId);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 365100685: {
            if (input.isAtField(FieldNames.eKLAFMBHNIP)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(eKLAFMBHNIP);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -184174347:
          case -1394261434: {
            if (input.isAtField(FieldNames.diceInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(diceInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueQuery clone() {
      return new ChessRogueQuery().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueQuery parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueQuery(), data).checkInitialized();
    }

    public static ChessRogueQuery parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQuery(), input).checkInitialized();
    }

    public static ChessRogueQuery parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQuery(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueQuery messages
     */
    public static MessageFactory<ChessRogueQuery> getFactory() {
      return ChessRogueQueryFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code EKLAFMBHNIPEntry}
     */
    public static final class EKLAFMBHNIPEntry extends ProtoMessage<EKLAFMBHNIPEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional bool value = 2;</code>
       */
      private boolean value_;

      private EKLAFMBHNIPEntry() {
      }

      /**
       * @return a new empty instance of {@code EKLAFMBHNIPEntry}
       */
      public static EKLAFMBHNIPEntry newInstance() {
        return new EKLAFMBHNIPEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public EKLAFMBHNIPEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public EKLAFMBHNIPEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @return this
       */
      public EKLAFMBHNIPEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = false;
        return this;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @return the value_
       */
      public boolean getValue() {
        return value_;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public EKLAFMBHNIPEntry setValue(final boolean value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public EKLAFMBHNIPEntry copyFrom(final EKLAFMBHNIPEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public EKLAFMBHNIPEntry mergeFrom(final EKLAFMBHNIPEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public EKLAFMBHNIPEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = false;
        return this;
      }

      @Override
      public EKLAFMBHNIPEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof EKLAFMBHNIPEntry)) {
          return false;
        }
        EKLAFMBHNIPEntry other = (EKLAFMBHNIPEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeBoolNoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 2;
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public EKLAFMBHNIPEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readBool();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeBool(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public EKLAFMBHNIPEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readBool();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public EKLAFMBHNIPEntry clone() {
        return new EKLAFMBHNIPEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static EKLAFMBHNIPEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new EKLAFMBHNIPEntry(), data).checkInitialized();
      }

      public static EKLAFMBHNIPEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new EKLAFMBHNIPEntry(), input).checkInitialized();
      }

      public static EKLAFMBHNIPEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new EKLAFMBHNIPEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating EKLAFMBHNIPEntry messages
       */
      public static MessageFactory<EKLAFMBHNIPEntry> getFactory() {
        return EKLAFMBHNIPEntryFactory.INSTANCE;
      }

      private enum EKLAFMBHNIPEntryFactory implements MessageFactory<EKLAFMBHNIPEntry> {
        INSTANCE;

        @Override
        public EKLAFMBHNIPEntry create() {
          return EKLAFMBHNIPEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum ChessRogueQueryFactory implements MessageFactory<ChessRogueQuery> {
      INSTANCE;

      @Override
      public ChessRogueQuery create() {
        return ChessRogueQuery.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kDHBPKCKEAL = FieldName.forField("KDHBPKCKEAL");

      static final FieldName mainStoryId = FieldName.forField("mainStoryId", "main_story_id");

      static final FieldName eKLAFMBHNIP = FieldName.forField("EKLAFMBHNIP");

      static final FieldName diceInfo = FieldName.forField("diceInfo", "dice_info");
    }
  }
}
