// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueUpdateOuterClass {
  /**
   * Protobuf type {@code RogueUpdate}
   */
  public static final class RogueUpdate extends ProtoMessage<RogueUpdate> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 last_common_area_id = 7;</code>
     */
    private int lastCommonAreaId;

    /**
     * <code>optional uint32 last_rogue_type_id = 8;</code>
     */
    private int lastRogueTypeId;

    /**
     * <code>optional uint32 rogue_type_id = 12;</code>
     */
    private int rogueTypeId;

    private RogueUpdate() {
    }

    /**
     * @return a new empty instance of {@code RogueUpdate}
     */
    public static RogueUpdate newInstance() {
      return new RogueUpdate();
    }

    /**
     * <code>optional uint32 last_common_area_id = 7;</code>
     * @return whether the lastCommonAreaId field is set
     */
    public boolean hasLastCommonAreaId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 last_common_area_id = 7;</code>
     * @return this
     */
    public RogueUpdate clearLastCommonAreaId() {
      bitField0_ &= ~0x00000001;
      lastCommonAreaId = 0;
      return this;
    }

    /**
     * <code>optional uint32 last_common_area_id = 7;</code>
     * @return the lastCommonAreaId
     */
    public int getLastCommonAreaId() {
      return lastCommonAreaId;
    }

    /**
     * <code>optional uint32 last_common_area_id = 7;</code>
     * @param value the lastCommonAreaId to set
     * @return this
     */
    public RogueUpdate setLastCommonAreaId(final int value) {
      bitField0_ |= 0x00000001;
      lastCommonAreaId = value;
      return this;
    }

    /**
     * <code>optional uint32 last_rogue_type_id = 8;</code>
     * @return whether the lastRogueTypeId field is set
     */
    public boolean hasLastRogueTypeId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 last_rogue_type_id = 8;</code>
     * @return this
     */
    public RogueUpdate clearLastRogueTypeId() {
      bitField0_ &= ~0x00000002;
      lastRogueTypeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 last_rogue_type_id = 8;</code>
     * @return the lastRogueTypeId
     */
    public int getLastRogueTypeId() {
      return lastRogueTypeId;
    }

    /**
     * <code>optional uint32 last_rogue_type_id = 8;</code>
     * @param value the lastRogueTypeId to set
     * @return this
     */
    public RogueUpdate setLastRogueTypeId(final int value) {
      bitField0_ |= 0x00000002;
      lastRogueTypeId = value;
      return this;
    }

    /**
     * <code>optional uint32 rogue_type_id = 12;</code>
     * @return whether the rogueTypeId field is set
     */
    public boolean hasRogueTypeId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 rogue_type_id = 12;</code>
     * @return this
     */
    public RogueUpdate clearRogueTypeId() {
      bitField0_ &= ~0x00000004;
      rogueTypeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 rogue_type_id = 12;</code>
     * @return the rogueTypeId
     */
    public int getRogueTypeId() {
      return rogueTypeId;
    }

    /**
     * <code>optional uint32 rogue_type_id = 12;</code>
     * @param value the rogueTypeId to set
     * @return this
     */
    public RogueUpdate setRogueTypeId(final int value) {
      bitField0_ |= 0x00000004;
      rogueTypeId = value;
      return this;
    }

    @Override
    public RogueUpdate copyFrom(final RogueUpdate other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        lastCommonAreaId = other.lastCommonAreaId;
        lastRogueTypeId = other.lastRogueTypeId;
        rogueTypeId = other.rogueTypeId;
      }
      return this;
    }

    @Override
    public RogueUpdate mergeFrom(final RogueUpdate other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLastCommonAreaId()) {
        setLastCommonAreaId(other.lastCommonAreaId);
      }
      if (other.hasLastRogueTypeId()) {
        setLastRogueTypeId(other.lastRogueTypeId);
      }
      if (other.hasRogueTypeId()) {
        setRogueTypeId(other.rogueTypeId);
      }
      return this;
    }

    @Override
    public RogueUpdate clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lastCommonAreaId = 0;
      lastRogueTypeId = 0;
      rogueTypeId = 0;
      return this;
    }

    @Override
    public RogueUpdate clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueUpdate)) {
        return false;
      }
      RogueUpdate other = (RogueUpdate) o;
      return bitField0_ == other.bitField0_
        && (!hasLastCommonAreaId() || lastCommonAreaId == other.lastCommonAreaId)
        && (!hasLastRogueTypeId() || lastRogueTypeId == other.lastRogueTypeId)
        && (!hasRogueTypeId() || rogueTypeId == other.rogueTypeId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(lastCommonAreaId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(lastRogueTypeId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(rogueTypeId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lastCommonAreaId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lastRogueTypeId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rogueTypeId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueUpdate mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // lastCommonAreaId
            lastCommonAreaId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // lastRogueTypeId
            lastRogueTypeId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // rogueTypeId
            rogueTypeId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.lastCommonAreaId, lastCommonAreaId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.lastRogueTypeId, lastRogueTypeId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.rogueTypeId, rogueTypeId);
      }
      output.endObject();
    }

    @Override
    public RogueUpdate mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1313973751:
          case 2061831298: {
            if (input.isAtField(FieldNames.lastCommonAreaId)) {
              if (!input.trySkipNullValue()) {
                lastCommonAreaId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1384811513:
          case 1305719026: {
            if (input.isAtField(FieldNames.lastRogueTypeId)) {
              if (!input.trySkipNullValue()) {
                lastRogueTypeId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -802434961:
          case -223704357: {
            if (input.isAtField(FieldNames.rogueTypeId)) {
              if (!input.trySkipNullValue()) {
                rogueTypeId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueUpdate clone() {
      return new RogueUpdate().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueUpdate parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueUpdate(), data).checkInitialized();
    }

    public static RogueUpdate parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueUpdate(), input).checkInitialized();
    }

    public static RogueUpdate parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueUpdate(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueUpdate messages
     */
    public static MessageFactory<RogueUpdate> getFactory() {
      return RogueUpdateFactory.INSTANCE;
    }

    private enum RogueUpdateFactory implements MessageFactory<RogueUpdate> {
      INSTANCE;

      @Override
      public RogueUpdate create() {
        return RogueUpdate.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName lastCommonAreaId = FieldName.forField("lastCommonAreaId", "last_common_area_id");

      static final FieldName lastRogueTypeId = FieldName.forField("lastRogueTypeId", "last_rogue_type_id");

      static final FieldName rogueTypeId = FieldName.forField("rogueTypeId", "rogue_type_id");
    }
  }
}
