// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class MEMPJPLINCNOuterClass {
  /**
   * Protobuf type {@code MEMPJPLINCN}
   */
  public static final class MEMPJPLINCN extends ProtoMessage<MEMPJPLINCN> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 HFHKBMGBJAN = 15;</code>
     */
    private int hFHKBMGBJAN;

    /**
     * <code>optional .ItemList NHCHCBBLKBK = 6;</code>
     */
    private final ItemListOuterClass.ItemList nHCHCBBLKBK = ItemListOuterClass.ItemList.newInstance();

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     */
    private final RepeatedInt bLGIMDCNDHJ = RepeatedInt.newEmptyInstance();

    private MEMPJPLINCN() {
    }

    /**
     * @return a new empty instance of {@code MEMPJPLINCN}
     */
    public static MEMPJPLINCN newInstance() {
      return new MEMPJPLINCN();
    }

    /**
     * <code>optional uint32 HFHKBMGBJAN = 15;</code>
     * @return whether the hFHKBMGBJAN field is set
     */
    public boolean hasHFHKBMGBJAN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 HFHKBMGBJAN = 15;</code>
     * @return this
     */
    public MEMPJPLINCN clearHFHKBMGBJAN() {
      bitField0_ &= ~0x00000001;
      hFHKBMGBJAN = 0;
      return this;
    }

    /**
     * <code>optional uint32 HFHKBMGBJAN = 15;</code>
     * @return the hFHKBMGBJAN
     */
    public int getHFHKBMGBJAN() {
      return hFHKBMGBJAN;
    }

    /**
     * <code>optional uint32 HFHKBMGBJAN = 15;</code>
     * @param value the hFHKBMGBJAN to set
     * @return this
     */
    public MEMPJPLINCN setHFHKBMGBJAN(final int value) {
      bitField0_ |= 0x00000001;
      hFHKBMGBJAN = value;
      return this;
    }

    /**
     * <code>optional .ItemList NHCHCBBLKBK = 6;</code>
     * @return whether the nHCHCBBLKBK field is set
     */
    public boolean hasNHCHCBBLKBK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ItemList NHCHCBBLKBK = 6;</code>
     * @return this
     */
    public MEMPJPLINCN clearNHCHCBBLKBK() {
      bitField0_ &= ~0x00000002;
      nHCHCBBLKBK.clear();
      return this;
    }

    /**
     * <code>optional .ItemList NHCHCBBLKBK = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableNHCHCBBLKBK()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemListOuterClass.ItemList getNHCHCBBLKBK() {
      return nHCHCBBLKBK;
    }

    /**
     * <code>optional .ItemList NHCHCBBLKBK = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemListOuterClass.ItemList getMutableNHCHCBBLKBK() {
      bitField0_ |= 0x00000002;
      return nHCHCBBLKBK;
    }

    /**
     * <code>optional .ItemList NHCHCBBLKBK = 6;</code>
     * @param value the nHCHCBBLKBK to set
     * @return this
     */
    public MEMPJPLINCN setNHCHCBBLKBK(final ItemListOuterClass.ItemList value) {
      bitField0_ |= 0x00000002;
      nHCHCBBLKBK.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     * @return whether the bLGIMDCNDHJ field is set
     */
    public boolean hasBLGIMDCNDHJ() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     * @return this
     */
    public MEMPJPLINCN clearBLGIMDCNDHJ() {
      bitField0_ &= ~0x00000004;
      bLGIMDCNDHJ.clear();
      return this;
    }

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBLGIMDCNDHJ()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getBLGIMDCNDHJ() {
      return bLGIMDCNDHJ;
    }

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableBLGIMDCNDHJ() {
      bitField0_ |= 0x00000004;
      return bLGIMDCNDHJ;
    }

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     * @param value the bLGIMDCNDHJ to add
     * @return this
     */
    public MEMPJPLINCN addBLGIMDCNDHJ(final int value) {
      bitField0_ |= 0x00000004;
      bLGIMDCNDHJ.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 BLGIMDCNDHJ = 5;</code>
     * @param values the bLGIMDCNDHJ to add
     * @return this
     */
    public MEMPJPLINCN addAllBLGIMDCNDHJ(final int... values) {
      bitField0_ |= 0x00000004;
      bLGIMDCNDHJ.addAll(values);
      return this;
    }

    @Override
    public MEMPJPLINCN copyFrom(final MEMPJPLINCN other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        hFHKBMGBJAN = other.hFHKBMGBJAN;
        nHCHCBBLKBK.copyFrom(other.nHCHCBBLKBK);
        bLGIMDCNDHJ.copyFrom(other.bLGIMDCNDHJ);
      }
      return this;
    }

    @Override
    public MEMPJPLINCN mergeFrom(final MEMPJPLINCN other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasHFHKBMGBJAN()) {
        setHFHKBMGBJAN(other.hFHKBMGBJAN);
      }
      if (other.hasNHCHCBBLKBK()) {
        getMutableNHCHCBBLKBK().mergeFrom(other.nHCHCBBLKBK);
      }
      if (other.hasBLGIMDCNDHJ()) {
        getMutableBLGIMDCNDHJ().addAll(other.bLGIMDCNDHJ);
      }
      return this;
    }

    @Override
    public MEMPJPLINCN clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      hFHKBMGBJAN = 0;
      nHCHCBBLKBK.clear();
      bLGIMDCNDHJ.clear();
      return this;
    }

    @Override
    public MEMPJPLINCN clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nHCHCBBLKBK.clearQuick();
      bLGIMDCNDHJ.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MEMPJPLINCN)) {
        return false;
      }
      MEMPJPLINCN other = (MEMPJPLINCN) o;
      return bitField0_ == other.bitField0_
        && (!hasHFHKBMGBJAN() || hFHKBMGBJAN == other.hFHKBMGBJAN)
        && (!hasNHCHCBBLKBK() || nHCHCBBLKBK.equals(other.nHCHCBBLKBK))
        && (!hasBLGIMDCNDHJ() || bLGIMDCNDHJ.equals(other.bLGIMDCNDHJ));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(hFHKBMGBJAN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(nHCHCBBLKBK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < bLGIMDCNDHJ.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(bLGIMDCNDHJ.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(hFHKBMGBJAN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(nHCHCBBLKBK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * bLGIMDCNDHJ.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(bLGIMDCNDHJ);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MEMPJPLINCN mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 120: {
            // hFHKBMGBJAN
            hFHKBMGBJAN = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // nHCHCBBLKBK
            input.readMessage(nHCHCBBLKBK);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // bLGIMDCNDHJ [packed=true]
            input.readPackedUInt32(bLGIMDCNDHJ, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // bLGIMDCNDHJ [packed=false]
            tag = input.readRepeatedUInt32(bLGIMDCNDHJ, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.hFHKBMGBJAN, hFHKBMGBJAN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.nHCHCBBLKBK, nHCHCBBLKBK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.bLGIMDCNDHJ, bLGIMDCNDHJ);
      }
      output.endObject();
    }

    @Override
    public MEMPJPLINCN mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -110713808: {
            if (input.isAtField(FieldNames.hFHKBMGBJAN)) {
              if (!input.trySkipNullValue()) {
                hFHKBMGBJAN = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1681591244: {
            if (input.isAtField(FieldNames.nHCHCBBLKBK)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(nHCHCBBLKBK);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 135413912: {
            if (input.isAtField(FieldNames.bLGIMDCNDHJ)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(bLGIMDCNDHJ);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MEMPJPLINCN clone() {
      return new MEMPJPLINCN().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MEMPJPLINCN parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MEMPJPLINCN(), data).checkInitialized();
    }

    public static MEMPJPLINCN parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MEMPJPLINCN(), input).checkInitialized();
    }

    public static MEMPJPLINCN parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MEMPJPLINCN(), input).checkInitialized();
    }

    /**
     * @return factory for creating MEMPJPLINCN messages
     */
    public static MessageFactory<MEMPJPLINCN> getFactory() {
      return MEMPJPLINCNFactory.INSTANCE;
    }

    private enum MEMPJPLINCNFactory implements MessageFactory<MEMPJPLINCN> {
      INSTANCE;

      @Override
      public MEMPJPLINCN create() {
        return MEMPJPLINCN.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName hFHKBMGBJAN = FieldName.forField("HFHKBMGBJAN");

      static final FieldName nHCHCBBLKBK = FieldName.forField("NHCHCBBLKBK");

      static final FieldName bLGIMDCNDHJ = FieldName.forField("BLGIMDCNDHJ");
    }
  }
}
